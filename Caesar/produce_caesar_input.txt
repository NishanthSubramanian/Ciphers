before reading, there are a couple of things worth knowing. while most of my short career i had created production apps using java, js, and ruby, i constantly learn new languages and frameworks. i believe that languages and language (or framework) specific communities bring new ideas to the table that you can later use in other situations: functional programming can teach you a lot about object-oriented programming, and working full time on a rails app will teach you a lot about testing (if you’ll practice it). the problem with learning all the awesome concepts from each language is that you eventually find yourself frustrated from looking for all the good features of these other languages in one language.
another key thing to know is that i use the terminal all the time. most of my time on a computer is split between a browser and a terminal. yes, i code in vim. i like type systems that don’t have nulls (i like optional types) and that are strong. i don’t like java’s type system for that matter, though the latest version of java i used was java 6, so there’s a good chance some things have changed! java’s type system was the reason why i tried ruby because the ruby community always talked about how much they are different than java. it always felt like when i write java code, i’m helping the compiler, instead of the other way around.
the last thing i want to say is that the language i’m looking for may not be the language you’re looking for! in this article, i’ll cover up some languages i used for the last couple of months, maybe for serious work and/or for fun projects.
you see, i just love ruby. ruby is a great, expressive language with lots of mature libraries (we call them “gems”), that can help you get your app up and running very quickly. rails is very mature and easy to use. tests are baked into the community core more than any other language i’ve ever used. ruby is a pure oop language, so most of the code will share the same api style — classes, no matter which libraries you’ll choose. the community is powerful as well — ruby devs seem to contribute code to already-made libraries instead of writing their own library each time (activerecord and sequel as an example of awesome well-spread libraries). this consensus in terms of libraries helps with making extensions to libraries, and i usually give the rails admin gem as an example of making life easier.
ruby, in terms of speed, isn’t at its best. deployments are usually heavy and take time to load. practicing rails is awesome and so much fun, but in reality, it is both time-consuming and money-consuming to run rails apps: especially on “serverless” container platforms like heroku, aws ecs because of ram, disk, traffic and boot time, where you pay extra for all of these things. running rails locally is totally fine and bundler is awesome — but sometimes, there are issues and pitfalls with the “hot reloading” mechanism, which rails uses because the startup time can take on a medium-size app 5–10 seconds.
i also love javascript. most of my frontend work is for the web, because everyone has a browser — so shipping is easy. picking another language sounds weird to most of my colleagues: “why would you want to recruit 2 people instead of one?”. javascript is an easy language too, and because it is so widespread and easy to start with, it seems like you can’t go wrong by using it. prototyping implementations with this simple language is so easy, you can always just pop up the node repl or open up your dev tools! and the developer tools... ohhh, the dev tools! they're amazing and everywhere and get lots of attention from people who build for the web, which is lots of developers! it's so wonderful..